#!/bin/bash

# Jenkins home directory.
JENKINS_HOME=$HOME/dev/docker-volumes/jenkins_home
# Http port.
JENKINS_HTTP_PORT=8083
# Jnlp port.
JENKINS_JNLP_PORT=50000
# Container name used to execute.
CONTAINER_NAME=jenkins
# Command used to start the container
CMD="docker run -d -p $JENKINS_HTTP_PORT:8080 -p $JENKINS_JNLP_PORT:50000 -v $JENKINS_HOME:/var/jenkins_home --name $CONTAINER_NAME jenkins/jenkins:lts"

if [ "$#" = 0 ]; then
	script_name=$(basename "$0")
	echo "Usage: $script_name (start | stop | restart | remove | status | logs)"
	exit 0
elif [ "$#" -gt 1 ]; then
	echo "Too many parameters specified."
	echo "Usage: $script_name (start | stop | restart | remove | status | logs)"
	exit 1
elif [ "$1" != "start" ] && [ "$1" != "stop" ] && [ "$1" != "restart" ] && [ "$1" != "remove" ] && [ "$1" != "status" ] && [ "$1" != "logs" ]; then
	echo "Option '$1' not valid."
	echo "Usage: $script_name (start | stop | restart | remove | status | logs)"
	exit 1
fi

###########################################################################################
# Jenkins home dir $JENKINS_HOME creation if not exists.
# Return code:
#       0 - Directory created or existing.
#       1 - Error creatind directory.
###########################################################################################
function createHomeDir() {
	if [ -d $JENKINS_HOME ]; then
		echo "Jenkins home directory $JENKINS_HOME already exists. Existing configuration will be used."
	else
		mkdir -p $JENKINS_HOME
		[ $? = 0 ] && echo "Jenkins home dir created: $JENKINS_HOME" || (echo "Error creating Jenkins home dir ($JENKINS_HOME)" && return 1)
	fi
}

###########################################################################################
# Checks if the container named $CONTAINER_NAME is created and started.
# Return code:
#       0 - Container created and started.
#       1 - Container created but stoped.
#       2 - Container not created.
###########################################################################################
function getContainerStatus {
	local val=$(docker ps --format "{{.Names}}" | grep -w $CONTAINER_NAME)
	if [ "$val" == $CONTAINER_NAME ]; then
		return 0
	else
		val=$(docker ps -a --format "{{.Names}}" | grep -w $CONTAINER_NAME)
		if [ "$val" == $CONTAINER_NAME ]; then
			return 1
		else
			return 2
		fi
	fi
}

###########################################################################################
# start command option.
###########################################################################################
function start() {
	local ret
	createHomeDir
	[ $? != 0 ] && exit 1
	getContainerStatus
	case $? in
	0)
		echo "Container $CONTAINER_NAME already started."
		echo "Available at: http://localhost:$JENKINS_HTTP_PORT"
		;;
	1)
		echo "Container $CONTAINER_NAME already created. Starting."
		ret=$(docker start $CONTAINER_NAME 2>&1)
		[ $? == 0 ] && echo -e "Container started: $ret \nAvailable at: http://localhost:$JENKINS_HTTP_PORT" || echo "Error starting container:\n$ret" 
		;;
	2)
		echo "Creating and starting $CONTAINER_NAME container."
		ret=$($CMD 2>&1)
		[ $? == 0 ] && echo -e "Container started: $ret \nAvailable at: http://localhost:$JENKINS_HTTP_PORT" || echo "Error starting container:\n$ret"
	esac
}

###########################################################################################
# stop command option.
###########################################################################################
function stop() {
	local ret
	getContainerStatus
	case $? in
	0)
		ret=$(docker stop $CONTAINER_NAME)
		[ $? == 0 ] && echo "Container stoped: $ret" || echo "Error stoping container:\n$ret"
		;;
	1)
		echo "Container $CONTAINER_NAME already stoped."
		;;
	2)
		echo "Container $CONTAINER_NAME not created."
	esac
}

###########################################################################################
# restart command option.
###########################################################################################
function restart() {
	local ret
	getContainerStatus
	case $? in
	0)
		ret=$(docker stop $CONTAINER_NAME)
		if [ $? == 0 ]; then
			echo "Container stoped: $ret"
			ret=$(docker start $CONTAINER_NAME 2>&1)
			[ $? == 0 ] && echo "Container started: $ret" || echo "Error starting container:\n$ret"
		else
			echo "Error stoping container:\n$ret"
		fi
		;;
	1)
		echo "Container $CONTAINER_NAME already stoped."
		ret=$(docker start $CONTAINER_NAME 2>&1)
		[ $? == 0 ] && echo "Container started: $ret" || echo "Error starting container:\n$ret"
		;;
	2)
		echo "Container $CONTAINER_NAME not created."
	esac
}

###########################################################################################
# remove command option.
###########################################################################################
function remove() {
	local ret
	getContainerStatus
	case $? in
	0 | 1)
		ret=$(docker rm -vf $CONTAINER_NAME)
		[ $? == 0 ] && echo "Container removed: $ret" || echo "Error removing container:\n$ret"
		;;
	2)
		echo "Container $CONTAINER_NAME not created."
	esac
}

###########################################################################################
# status command option.
###########################################################################################
function status() {
	getContainerStatus
	case $? in
	0)
		echo "Container $CONTAINER_NAME status: created and running."
		;;
	1)
		echo "Container $CONTAINER_NAME status: created but stoped."
		;;
	2)
		echo "Container $CONTAINER_NAME status: not created."
		;;
	esac
}

###########################################################################################
# logs command option.
###########################################################################################
function logs() {
	getContainerStatus
	local rc=$?
	if [ $rc == 0 ]; then
		docker logs $CONTAINER_NAME
	elif [ $rc == 1 ]; then
		echo "Container not started."
	else
		echo "Container not created."
	fi
}

case $1 in
"start")
	start
	;;
"stop")
	stop
	;;
"restart")
	restart
	;;
"remove")
	remove
	;;
"status")
	status
	;;
"logs")
	logs
	;;
esac
